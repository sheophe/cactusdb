# [quota]
## Quota is use to add some limitation for the read write flow and then
## gain predictable stable performance.
## CPU quota for these front requests can use, default value is 0, it means unlimited.
## The unit is millicpu but for now this config is approximate and soft limit.
# foreground-cpu-time: 0

## Write bandwidth limitation for this CactusDB instance, default value is 0 which means unlimited.
# foreground-write-bandwidth = "0B"

## Read bandwidth limitation for this CactusDB instance, default value is 0 which means unlimited.
# foreground-read-bandwidth = "0B"

## CPU quota for these background requests can use, default value is 0, it means unlimited.
## The unit is millicpu but for now this config is approximate and soft limit.
# background-cpu-time: 0

## Write bandwidth limitation for backgroud request for this CactusDB instance, default value is 0 which means unlimited.
# background-write-bandwidth = "0B"

## Read bandwidth limitation for background request for this CactusDB instance, default value is 0 which means unlimited.
# background-read-bandwidth = "0B"

## Limitation of max delay duration, default value is 0 which means unlimited.
# max-delay-duration = "500ms"

## Whether to enable quota auto tune
# enable-auto-tune = false

# [log]
## Log levels: trace, debug, info, warning, error, fatal.
## Note that `trace` is only available in development builds.
# level: debug

## log format, one of json, text. Default to text.
# format: text

## Enable automatic timestamps in log output, if not set, it will be defaulted to true.
# enable-timestamp: true

## Log file configuration
# [log.file]
## Usually it is set through command line.
# filename = ""

## max log file size in MB (upper limit to 4096MB)
# max-size = "300MB"

## max log file keep days
# max-days = 0

## maximum number of old log files to retain
# max-backups = 0

[server]
## Listening address.
addr = "127.0.0.1:20160"

## Address for node syncronization using gRPC protocol.
## If not set, the node will work in standalone mode.
cluster-addr = "244.0.0.1:45009"

## Compression type for gRPC channel: none, deflate or gzip.
# cluster-compression-type = "none"

## Size of the thread pool for the gRPC server.
# cluster-connector-concurrency = 5

## The number of max concurrent streams/requests on a client connection.
# cluster-concurrent-stream = 1024

## Limit the memory size can be used by gRPC. Default is unlimited.
## gRPC usually works well to reclaim memory by itself. Limit the memory in case OOM
## is observed. Note that limit the usage can lead to potential stall.
# cluster-memory-pool-quota = "32GB"

## Amount to read ahead on individual gRPC streams.
# cluster-stream-initial-window-size = "2MB"

## Time to wait before sending out a ping to check if server is still alive.
## This is only for communications between CactusDB instances.
# cluster-keepalive-time = "10s"

## Time to wait before closing the connection without receiving KeepAlive ping Ack.
# cluster-keepalive-timeout = "3s"

## Set maximum message length in bytes that gRPC can send. `-1` means unlimited.
# max-grpc-send-msg-len = 10485760

## Whether to enable request batch.
# enable-request-batch = true

## Attributes about this server, e.g. `{ zone = "us-west-1", disk = "ssd" }`.
# labels = {}

## The working thread count of the background pool, which include the endpoint of and br, split-check,
## region thread and other thread of delay-insensitive tasks.
## The default value is 2 if the number of CPU cores is less than 16, otherwise 3.
# background-thread-count = 2

## If handle time is larger than the threshold, it will print slow log in endpoint.
## The default value is 1s.
# end-point-slow-log-threshold = "1s"
